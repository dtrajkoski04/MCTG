@startuml
title Monster Trading Cards Game (MCTG) - UML Diagram

package "httpserver" {
    package "http" {
        enum ContentType {
            PLAIN_TEXT
            HTML
            JSON
        }
        enum HttpStatus {
            OK
            CREATED
            ACCEPTED
            NO_CONTENT
            BAD_REQUEST
            UNAUTHORIZED
            FORBIDDEN
            NOT_FOUND
            CONFLICT
            INTERNAL_SERVER_ERROR
            NOT_IMPLEMENTED
        }
        enum Method {
            GET
            POST
            PUT
            PATCH
            DELETE
        }
    }

    package "server" {
        class HeaderMap {
            +ingest(headerLine: String)
            +getHeader(headerName: String): String
            +getContentLength(): int
            +print()
        }

        class Request {
            +getServiceRoute(): String
            +getUrlContent(): String
            +setUrlContent(urlContent: String)
            +getMethod(): Method
            +setMethod(method: Method)
            +getPathname(): String
            +setPathname(pathname: String)
            +getParams(): String
            +setParams(params: String)
            +getHeaderMap(): HeaderMap
            +setHeaderMap(headerMap: HeaderMap)
            +getBody(): String
            +setBody(body: String)
            +getPathParts(): List<String>
            +setPathParts(pathParts: List<String>)
        }

        class Response {
            +Response(httpStatus: HttpStatus, contentType: ContentType, content: String)
            +get(): String
        }

        class Server {
            +Server(port: int, router: Router)
            +start()
        }

        interface Service {
            +handleRequest(request: Request): Response
        }
    }

    package "utils" {
        class RequestBuilder {
            +buildRequest(bufferedReader: BufferedReader): Request
        }

        class RequestHandler {
            +RequestHandler(clientSocket: Socket, router: Router)
            +run()
        }

        class Router {
            +addService(route: String, service: Service)
            +removeService(route: String)
            +resolve(route: String): Service
        }
    }
}

package "application" {

    package "model" {
        abstract class Card {
            - id: String
            - name: String
            - damage: int
            - elementType: String
            +getId(): String
            +setId(id: String)
            +getName(): String
            +setName(name: String)
            +getDamage(): int
            +setDamage(damage: int)
            +getElementType(): String
            +setElementType(elementType: String)
            +canAttack(opponent: Card): boolean
        }

        class MonsterCard extends Card {
            +canAttack(opponent: Card): boolean
        }

        class SpellCard extends Card {
            +canAttack(opponent: Card): boolean
        }

        class Deck {
            - cards: List<Card>
            +addCard(card: Card): boolean
            +removeCard(card: Card): boolean
            +getCards(): List<Card>
            +isValid(): boolean
        }

        class GameStats {
            - gamesPlayed: int
            - elo: int
            +updateStats(won: boolean)
            +getGamesPlayed(): int
            +getElo(): int
        }

        class Package {
            - id: String
            - cards: List<Card>
            +getId(): String
            +getCards(): List<Card>
            +openPackage(): List<Card>
        }

        class TradeDeal {
            - offeredCard: Card
            - requiredType: String
            - minimumDamage: int
            +isAcceptable(offeredCard: Card): boolean
        }

        class User {
            - username: String
            - password: String
            - coins: int
            - stack: List<Card>
            - deck: Deck
            - stats: GameStats
            +acquireCard(card: Card): boolean
            +buyPackage(packageCards: List<Card>): boolean
            +defineDeck(cards: List<Card>): boolean
            +getELO(): int
            +getDeck(): Deck
            +getStack(): List<Card>
        }

        Deck "1" -- "4" Card
        User "1" -- "1" Deck
        User "1" -- "1" GameStats
        Package "1" -- "5" Card
        TradeDeal "1" -- "1" Card
    }
}

@enduml
